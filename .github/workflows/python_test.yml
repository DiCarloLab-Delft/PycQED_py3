name: Build Status

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8']

    steps:
    - uses: actions/checkout@v1
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup headless display
      run: |
        sudo apt-get update
        sudo apt-get install xvfb
        sudo Xvfb :99 -screen 0 1024x768x24 </dev/null &
        sleep 3
    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    # Now installs from specific commit. Should be more reliable than trying to fetch latest (unofficial) release.
    - name: Install development release of OpenQL
      run: |
        pip install cmake
        pip install wheel
        pip install 'qutechopenql @ git+https://github.com/DiCarloLab-Delft/OpenQL@82a9881bdb2c2f2b0620c14c549c436f21d1607c'

    - name: Install dependencies
      run: sudo apt-get install python3-pyqt5
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install qutip  # ensure all dependencies installed before qutip
        pip install -e .   # installs pycqed itself
        pip install coverage
        pip install pytest-cov
        pip install codecov
        pip install codacy-coverage
        pip install pytest
        pip install pytest-xvfb
    - name: Lint with flake8
      run: |
        pip install flake8
        # dont stop the build if there are Python syntax errors or undefined names
        flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        py.test pycqed/tests --cov=pycqed --cov-report xml --cov-report html --cov-config=.coveragerc
#    - name: Upload code coverage report
#      run: |
#        bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
#        codecov
#      env: # set secrets as environmental variables
#        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
