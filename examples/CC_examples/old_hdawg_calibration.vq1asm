# CC_BACKEND_VERSION 0.2.4
# OPENQL_VERSION 0.8.0
# Program: 'CW_RO_sequence'
# Note:    generated by OpenQL Central Controller backend
#
# synchronous start and latency compensation
                add             R63,1,R0                # R63 externally set by user, prevent 0 value which would wrap counter
                seq_bar         20                      # synchronization
syncLoop:       seq_out         0x00000000,1            # 20 ns delay
                loop            R0,@syncLoop            #
mainLoop:                                               #
### Kernel: 'k_main'
## Bundle 0: start_cycle=1, duration_in_cycles=300:
 # READOUT: measure(q0)
  # slot=1, instrument='ro_1', group=0': signal='[dummy]'
 # last bundle of kernel, will pad outputs to match durations
  # slot=1, instrument='ro_1': lastStartCycle=0, start_cycle=1, slotDurationInCycles=300
[0]             seq_out         0x00000000,301          # cycle 0-301: padding on 'ro_2'
[1]             seq_out         0x00000000,301          # cycle 0-301: padding on 'mw_0'
# comment
[2]             seq_out         0x00000000,2            # 00000000000000000000000000000000
[2]             seq_out         0x80008000,2            # 10000000000000001000000000000000
[2]             seq_out         0x80018001,2            # 10000000000000011000000000000001
[2]             seq_out         0x80028002,2            # 10000000000000101000000000000010
[2]             seq_out         0x80038003,2            # 10000000000000111000000000000011
[2]             seq_out         0x80048004,2            # 10000000000001001000000000000100
[2]             seq_out         0x80058005,2            # 10000000000001011000000000000101
[2]             seq_out         0x80068006,2            # 10000000000001101000000000000110
[2]             seq_out         0x80078007,2            # 10000000000001111000000000000111
[2]             seq_out         0x80088008,2            # 10000000000010001000000000001000
[2]             seq_out         0x80098009,2            # 10000000000010011000000000001001
[2]             seq_out         0x800A800A,2            # 10000000000010101000000000001010
[2]             seq_out         0x800B800B,2            # 10000000000010111000000000001011
[2]             seq_out         0x800C800C,2            # 10000000000011001000000000001100
[2]             seq_out         0x800D800D,2            # 10000000000011011000000000001101
[2]             seq_out         0x800E800E,2            # 10000000000011101000000000001110
[2]             seq_out         0x800F800F,2            # 10000000000011111000000000001111
[2]             seq_out         0x80108010,2            # 10000000000100001000000000010000
[2]             seq_out         0x80118011,2            # 10000000000100011000000000010001
[2]             seq_out         0x80128012,2            # 10000000000100101000000000010010
[2]             seq_out         0x80138013,2            # 10000000000100111000000000010011
[2]             seq_out         0x80148014,2            # 10000000000101001000000000010100
[2]             seq_out         0x80158015,2            # 10000000000101011000000000010101
[2]             seq_out         0x80168016,2            # 10000000000101101000000000010110
[2]             seq_out         0x80178017,2            # 10000000000101111000000000010111
[2]             seq_out         0x80188018,2            # 10000000000110001000000000011000
[2]             seq_out         0x80198019,2            # 10000000000110011000000000011001
[2]             seq_out         0x801A801A,2            # 10000000000110101000000000011010
[2]             seq_out         0x801B801B,2            # 10000000000110111000000000011011
[2]             seq_out         0x801C801C,2            # 10000000000111001000000000011100
[2]             seq_out         0x801D801D,2            # 10000000000111011000000000011101
[2]             seq_out         0x801E801E,2            # 10000000000111101000000000011110
[2]             seq_out         0x801F801F,2            # 10000000000111111000000000011111
[2]             seq_out         0x00000000,18           # 00000000000000000000000000000000
[3]             seq_out         0x00000000,2 
[3]             seq_out         0x80008000,2 
[3]             seq_out         0x80018001,2 
[3]             seq_out         0x80028002,2 
[3]             seq_out         0x80038003,2 
[3]             seq_out         0x80048004,2 
[3]             seq_out         0x80058005,2 
[3]             seq_out         0x80068006,2 
[3]             seq_out         0x80078007,2 
[3]             seq_out         0x80088008,2 
[3]             seq_out         0x80098009,2 
[3]             seq_out         0x800A800A,2 
[3]             seq_out         0x800B800B,2 
[3]             seq_out         0x800C800C,2 
[3]             seq_out         0x800D800D,2 
[3]             seq_out         0x800E800E,2 
[3]             seq_out         0x800F800F,2 
[3]             seq_out         0x80108010,2 
[3]             seq_out         0x80118011,2 
[3]             seq_out         0x80128012,2 
[3]             seq_out         0x80138013,2 
[3]             seq_out         0x80148014,2 
[3]             seq_out         0x80158015,2 
[3]             seq_out         0x80168016,2 
[3]             seq_out         0x80178017,2 
[3]             seq_out         0x80188018,2 
[3]             seq_out         0x80198019,2 
[3]             seq_out         0x801A801A,2 
[3]             seq_out         0x801B801B,2 
[3]             seq_out         0x801C801C,2 
[3]             seq_out         0x801D801D,2 
[3]             seq_out         0x801E801E,2 
[3]             seq_out         0x801F801F,2 
[3]             seq_out         0x00000000,18
# digIn=2
[4]             seq_out         0x00000000,301          # cycle 0-301: padding on 'mw_1'
[5]             seq_out         0x00000000,301          # cycle 0-301: padding on 'flux_0'

                jmp             @mainLoop               # loop indefinitely
