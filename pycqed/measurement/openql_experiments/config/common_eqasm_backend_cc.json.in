// File:    common_eqasm_backend_cc.json.in
// notes:   this file specifies commonalities between different setups for key "eqasm_backend_cc"
//          see https://openql.readthedocs.io/en/latest/platform.html#ccplatform for documentation of this file
// author: 	Wouter Vlothuizen e.a.


//{
//	"hardware_settings": {
//		"eqasm_backend_cc": {
			"instrument_definitions": {
				"qutech-qwg": {
					"channels": 4,
					"control_group_sizes": [1, 4]
				},
				"zi-hdawg": {
					"channels": 8,
					"control_group_sizes": [1, 2, 4, 8] // NB: size=1 needs special treatment of waveforms because one AWG unit drives 2 channels
				},
				"qutech-vsm": {
					"channels": 32,
					"control_group_sizes": [1]
				},
				"zi-uhfqa": {
					"channels": 9,
					"control_group_sizes": [1]
				}
			},   // instrument_definitions


			"control_modes": {
				"awg8-mw-vsm-hack": {					  // ZI_HDAWG8.py::cfg_codeword_protocol() == 'microwave'. Old hack to skip DIO[8]. Doesn't support QWG
					"control_bits": [
						[7,6,5,4,3,2,1,0],                // group 0
						[16,15,14,13,12,11,10,9]          // group 1
					],
					"trigger_bits": [31]
				},
				"awg8-mw-vsm": {						  // the way the mode above should have been and support for QWG
					"control_bits": [
						[7,6,5,4,3,2,1,0],                // group 0
                        [23,22,21,20,19,18,17,16]         // group 1
					],
					"trigger_bits": [31,15]
				},
				"awg8-mw-direct-iq": {				      // just I&Q to generate microwave without VSM. HDAWG8: "new_novsm_microwave"
					"control_bits": [
						[6,5,4,3,2,1,0],                  // group 0
						[13,12,11,10,9,8,7],              // group 1
						[22,21,20,19,18,17,16],           // group 2. NB: starts at bit 16 so twin-QWG can also support it
						[29,28,27,26,25,24,23]            // group 4
					],
					"trigger_bits": [31,15]
				},
				"awg8-flux": {							   // ZI_HDAWG8.py::cfg_codeword_protocol() == 'flux'
                    // NB: please note that internally one AWG unit handles 2 channels, which requires special handling of the waveforms
					"control_bits": [
						[2,1,0],                          // group 0
						[5,4,3],
						[8,7,6],
						[11,10,9],
						[18,17,16],                       // group 4. NB: starts at bit 16 so twin-QWG can also support it
						[21,20,19],
						[24,23,22],
						[27,26,25]                        // group 7
					],
					"trigger_bits": [31,15]
				},
				"awg8-flux-vector-8": {				       // single code word for 8 flux channels. FIXME: no official mode yet
					"control_bits": [
						[7,6,5,4,3,2,1,0]     // FIXME: how many bits are available
					],
					"trigger_bits": [31]
				},
				"uhfqa-9ch": {
					"control_bits": [[17],[18],[19],[20],[21],[22],[23],[24],[25]],    // group[0:8]
					"trigger_bits": [16],
					"result_bits": [[1],[2],[3],[4],[5],[6],[7],[8],[9]],              // group[0:8]
					"data_valid_bits": [0]
				},
				"vsm-32ch":{
					"control_bits": [
						[0],[1],[2],[3],[4],[5],[6],[7],                      // group[0:7]
						[8],[9],[10],[11],[12],[13],[14],[15],                // group[8:15]
						[16],[17],[18],[19],[20],[21],[22],[23],              // group[16:23]
						[24],[25],[26],[27],[28],[28],[30],[31]               // group[24:31]
					],
					"trigger_bits": []				                         // no trigger
				}
			},   // control_modes


            "signals": {
                "single-qubit-mw": [
                    {   "type": "mw",
                        "operand_idx": 0,
                        "value": [
                            "{gateName}-{instrumentName}:{instrumentGroup}-i",
                            "{gateName}-{instrumentName}:{instrumentGroup}-q"
                        ]
                    }
                ],
                "two-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    }
                ],
                "single-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,
                        "value": ["flux-0-{qubit}"]
                    }
                ]
            }  // signals

//		}  // eqasm_backend_cc
//	},  // hardware_settings
//}
