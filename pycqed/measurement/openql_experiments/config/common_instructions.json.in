// File:    common_instructions.json.in
// notes:   this file specifies commonalities between different setups for key "instructions"
//          see https://openql.readthedocs.io/en/latest/gen/reference_architectures.html#qutech-central-controller for documentation of this file
// author: 	Wouter Vlothuizen e.a.

//{
//	"instructions": {
        // based on PyqQED_py3 'mw_lutman.py' (matches default_mw_lutmap) and 'generate_CCL_cfg.py':
        "i": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [],   // no signal
                "static_codeword_override": [0]
            }
        },
        "rx180": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 180, "phi": 0 }
                    }
                ],
                "static_codeword_override": [1]
            }
        },
        "ry180": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 180, "phi": 90 }
                ],
                "static_codeword_override": [2]
            }
        },
        "rx90": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 90, "phi": 0 }
                    }
                ],
                "static_codeword_override": [3]
            }
        },
        "ry90": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 90, "phi": 90 }
                    }
                ],
                "static_codeword_override": [4]
            }
        },
        "rxm90": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": -90, "phi": 0 }
                    }
                ],
                "static_codeword_override": [5]
            }
        },
        "rym90": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": -90, "phi": 90 }
                    }
                ],
                "static_codeword_override": [6]
            }
        },
        // FIXME: missing codeword 7
        "spec": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "spec"}
                    }
                ],
                "static_codeword_override": [8]
            }
        },
        "rx12": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ef", "theta": 180, "phi": 0 }
                    }
                ],
                "static_codeword_override": [9]
            }
        },
        "square": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "square"}
                    }
                ],
                "static_codeword_override": [10]
            }
        },
        "rx45": {
            "duration": @MW_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 45, "phi": 0 }
                    }
                ],
                "static_codeword_override": [13]
            }
        },



        // based on PyqQED_py3 'generate_CCL_cfg.py':
        "prepz": {
            "duration": @INIT_DURATION@,
            "cc": {
                "signal": [],    // NB: no signal
                "static_codeword_override": [0]
            }
        },

        "measure": {
            "duration": @RO_DURATION@,
            "cc": {
                "signal": [
                    {   "type": "measure",
                        "operand_idx": 0,
                        "value": ["dummy"]          // Future extension: specify output and weight, and generate code word
                    }
                ],
                "static_codeword_override": [0]   // FIXME
            }
        },

        // helpers for CZ gate decomposition, flux_lutman compatible
        "_cz_sw_ne_park": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SW" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NE" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 2,
                        "value": { "type": "park" }
                    }
                ],
                "static_codeword_override": [3,1,5]
            }
        },
        "_cz_sw_ne": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SW" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NE" }
                    }
                ],
                "static_codeword_override": [3,1]
            }
        },
        "_cz_se_nw_park": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SE" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NW" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 2,
                        "value": { "type": "park" }
                    }
                ],
                "static_codeword_override": [2,4,5]
            }
        },
        "_cz_se_nw": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SE" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NW" }
                    }
                ],
                "static_codeword_override": [2,4]
            }
        },

        // cw_00 .. cw_31
        // FIXME: remove? Partly used in some gate decompositions
        "cw_00": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_01": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },
        "cw_02": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "cw_03": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "cw_04": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "cw_05": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "cw_06": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "cw_07": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [7]
            }
        },
        "cw_08": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [8]
            }
        },
        "cw_09": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [9]
            }
        },
        "cw_10": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [10]
            }
        },
        "cw_11": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [11]
            }
        },
        "cw_12": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [12]
            }
        },
        "cw_13": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [13]
            }
        },
        "cw_14": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [14]
            }
        },
        "cw_15": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [15]
            }
        },
        "cw_16": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [16]
            }
        },
        "cw_17": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [17]
            }
        },
        "cw_18": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [18]
            }
        },
        "cw_19": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [19]
            }
        },
        "cw_20": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [20]
            }
        },
        "cw_21": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [21]
            }
        },
        "cw_22": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [22]
            }
        },
        "cw_23": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [23]
            }
        },
        "cw_24": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [24]
            }
        },
        "cw_25": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [25]
            }
        },
        "cw_26": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [26]
            }
        },
        "cw_27": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [27]
            }
        },
        "cw_28": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [28]
            }
        },
        "cw_29": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [29]
            }
        },
        "cw_30": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [30]
            }
        },
        "cw_31": {
            "duration": @MW_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [31]
            }
        },

        // fl_cw_00 .. fl_cw_07
        // FIXME: remove? Used by multi_qubit_oql.py and single_qubit_oql.py
        "fl_cw_00": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [0,0]   // FIXME
            }
        },
        "fl_cw_01": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "fl_cw_02": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "fl_cw_03": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "fl_cw_04": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "fl_cw_05": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "fl_cw_06": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [6]
            }
        },
        "fl_cw_07": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [7]
            }
        },

        // single qubit flux hacks (compatible with QCC demo/flux lutman)
        "sf_square": {
            "duration": @FLUX_DURATION@,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [6]
            }
        },

        // additions for measurements using real time feedback
		"_wait_uhfqa": {
            "prototype": ["Z:qubit"],
            "duration": 720,
            "cc": {
                "signal": []
            }
        },
        "_dist_dsm": {
            "prototype": ["Z:qubit"],
			"duration": 20,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"cc": {
			    "readout_mode": "feedback",
				"signal": [
					{	"type": "measure",
						"operand_idx": 0,
						"value": []
					}
                ]
			}
		},
        "_wait_dsm": {
            "prototype": ["Z:qubit"],
            "duration": 280,
            "cc": {
                "signal": []
            }
        },

        // additions for pragma/break
        // Require OpenQL < 0.10.1 (use cQASM afterwards)
        "if_1_break": {
			"duration": 60,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"cc": {
				"signal": [],
				"pragma": {
                    "break": 1
				}
			}
		},
		"if_0_break": {
			"duration": 60,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"cc": {
				"signal": [],
				"pragma": {
                    "break": 0
				}
			}
		}

//	},	// end of "instructions"
