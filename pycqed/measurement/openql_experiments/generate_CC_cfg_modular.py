"""
    File:               generate_CC_cfg_modular.py
    Author:             Wouter Vlothuizen, QuTech
    Purpose:            generate configuration file for Qutech Central Controller, using common file to prevent duplication
    Notes:
    Usage:              import generate_CC_cfg_modular as g
                        g.generate_config_modular('config_cc_s17_direct_iq_openql_0_10.json')
    Bugs:

"""

from pathlib import Path
from datetime import datetime
import re
import inspect



def generate_config_modular(
        out_filename: str,
        mw_pulse_duration: int = 20,
        flux_pulse_duration: int = 40,
        ro_duration: int = 800,
        init_duration: int = 200000,
        in_filename: str = 'config/config_cc_s17_direct_iq.json.in'
        ):
    """
    Generates a configuration file for OpenQL for use with the CC.
    Args:
        out_filename (str)          : location where to write the config json file
        mw_pulse_duration (int)     : duration of the mw_pulses in ns
        flux_pulse_duration (int)   : duration of flux pulses in ns
        ro_duration (int)           : duration of the readout, including depletion in ns
        init_duration (int)         : duration of the initialization/reset operation in ns
        in_filename (str)           : name of input file

    Parameters present in generate_QCC_cfg.py that we do not implement:
        Unclear meaning of latency in OpenQL:
        ro_latency: int = 0,
        mw_latency: int = 0,
        fl_latency: int = 0,
        Not implemented in OpenQL anyway:
        mw_mw_buffer=0,
        mw_flux_buffer=0,
        flux_mw_buffer=0,
    """

    input = Path(in_filename).read_text()

    # handle include directives
    cfg = ''
    p = re.compile('#include +"(.*)"')
    for line in input.split('\n'):
        m = p.match(line)
        if m == None:
            cfg = cfg + line + '\n'
        else:
            incl_path = Path(in_filename).parent / m.group(1)
            print(f"including file '{incl_path}")
            include = incl_path.read_text()
            cfg = cfg + f"//--- start of include file '{incl_path}' ---\n"
            cfg = cfg + include
            cfg = cfg + f"//--- end of include file '{incl_path}' ---\n"

    # expand 'makros'
    cfg = cfg.replace('@MW_DURATION@', str(mw_pulse_duration))
    cfg = cfg.replace('@FLUX_DURATION@', str(flux_pulse_duration))
    cfg = cfg.replace('@RO_DURATION@', str(ro_duration))
    cfg = cfg.replace('@INIT_DURATION@', str(init_duration))

    hdr = inspect.cleandoc(f"""
    // This is a generated file, do NOT EDIT
    //
    // Generated by generate_CC_cfg_modular.py on {str(datetime.today())}.
    // 
    // Parameters were:
    // out_filename        = '{out_filename}'
    // mw_pulse_duration   = {mw_pulse_duration}
    // flux_pulse_duration = {flux_pulse_duration}
    // ro_duration         = {ro_duration}
    // init_duration       = {init_duration}
    // in_filename         = '{in_filename}'  
    """)

    cfg = hdr + '\n\n' + cfg

    Path(out_filename).write_text(cfg)
