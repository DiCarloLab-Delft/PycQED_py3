"""
    File:               generate_CC_cfg.py
    Author:             Wouter Vlothuizen, QuTech
    Purpose:            generate configuration file for Qutech Central Controller
    Notes:
    Usage:
    Bugs:

"""

from pathlib import Path
from datetime import datetime


def generate_config(out_filename: str,
                    mw_pulse_duration: int = 20,
                    flux_pulse_duration: int = 40,
                    ro_duration: int = 800,
                    init_duration: int = 200000,
                    in_file_name: str = 'config_cc_s17_vsm.json.in'):
    """
    Generates a configuration file for OpenQL for use with the CC.
    Args:
        filename (str)          : location where to write the config json file
        mw_pulse_duration (int) : duration of the mw_pulses in ns.
        flux_pulse_duration (int) : duration of flux pulses in ns.
        ro_duration       (int) : duration of the readout, including depletion
                                    in ns.
        init_duration     (int) : duration of the initialization/reset
            operation in ns. This corresponds to the wait time before every
            experiment.

        Parameters present in generate_QCC_cfg.py that we do not implement:
            Unclear meaning of latency in OpenQL:
            ro_latency: int = 0,
            mw_latency: int = 0,
            fl_latency: int = 0,
            Not implemented in OpenQL anyway:
            mw_mw_buffer=0,
            mw_flux_buffer=0,
            flux_mw_buffer=0,
    """

    cfg = Path(in_file_name).read_text()

    cfg = cfg.replace('@MW_DURATION@', str(mw_pulse_duration))
    cfg = cfg.replace('@FLUX_DURATION@', str(flux_pulse_duration))
    cfg = cfg.replace('@RO_DURATION@', str(ro_duration))
    cfg = cfg.replace('@INIT_DURATION@', str(init_duration))

    hdr = '// do NOT EDIT, generated by generate_CC_cfg.py on ' + str(datetime.today()) + '. Parameters were:\n'
    hdr += '//   out_filename        = ' + out_filename + '\n'
    hdr += '//   mw_pulse_duration   = ' + str(mw_pulse_duration) + '\n'
    hdr += '//   flux_pulse_duration = ' + str(flux_pulse_duration) + '\n'
    hdr += '//   ro_duration         = ' + str(ro_duration) + '\n'
    hdr += '//   init_duration       = ' + str(init_duration) + '\n'
    hdr += '//   in_file_name        = ' + in_file_name + '\n'

    cfg = hdr + cfg

    Path(out_filename).write_text(cfg)
