# Program: 'infinity_job'
# CC_BACKEND_VERSION 0.2.5
# OPENQL_VERSION 0.8.1.dcl-3
# Note:    generated by OpenQL Central Controller backend
#
# synchronous start and latency compensation
                add             R63,1,R0                # R63 externally set by user, prevent 0 value which would wrap counter
                seq_bar         20                      # synchronization
syncLoop:       seq_out         0x00000000,1            # 20 ns delay
                loop            R0,@syncLoop            # 
mainLoop:                                               # 
### Kernel: 'default_1'
### Kernel: 'post_select_block_2'
## Bundle 0: start_cycle=1, duration_in_cycles=7500:
 # READOUT: prepz(q4)
 # READOUT: prepz(q3)
 # READOUT: prepz(q2)
 # READOUT: prepz(q1)
 # READOUT: prepz(q0)
        
## Bundle 1: start_cycle=7501, duration_in_cycles=150:
 # READOUT: measure(q4)
  # slot=0, instrument='ro_1', group=3': signal='[dummy]'
 # READOUT: measure(q3)
  # slot=0, instrument='ro_1', group=2': signal='[dummy]'
 # READOUT: measure(q2)
  # slot=0, instrument='ro_1', group=1': signal='[dummy]'
 # READOUT: measure(q1)
  # slot=1, instrument='ro_2', group=0': signal='[dummy]'
 # READOUT: measure(q0)
  # slot=0, instrument='ro_1', group=0': signal='[dummy]'
 # last bundle of kernel, will pad outputs to match durations
  # slot=0, instrument='ro_1': lastEndCycle=0, startCycle=7501, slotDurationInCycles=150
[0]             seq_out         0x00000000,7501         # cycle 0-7501: padding on 'ro_1'
[0]             seq_out         0x001f0000,150          # cycle 7501-7651: code word/mask on 'ro_1'
# digIn=30
  # slot=1, instrument='ro_2': lastEndCycle=0, startCycle=7501, slotDurationInCycles=150
[1]             seq_out         0x00000000,7501         # cycle 0-7501: padding on 'ro_2'
[1]             seq_out         0x00030000,150          # cycle 7501-7651: code word/mask on 'ro_2'
# digIn=2
[2]             seq_out         0x00000000,7651         # cycle 0-7651: padding on 'mw_0'
[3]             seq_out         0x00000000,7651         # cycle 0-7651: padding on 'mw_1'
[4]             seq_out         0x00000000,7651         # cycle 0-7651: padding on 'flux_0'
        
### Kernel: 'end_post_select_block_3'
## Bundle 2: start_cycle=1, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 3: start_cycle=2, duration_in_cycles=1:
 # gate 'rx12 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx12-mw_0:2-i,rx12-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=9 (static override): groupDigOut=0x00090000
  # slot=2, instrument='mw_0': lastEndCycle=0, startCycle=2, slotDurationInCycles=1
[2]             seq_out         0x00000000,2            # cycle 0-2: padding on 'mw_0'
[2]             seq_out         0x80090000,1            # cycle 2-3: code word/mask on 'mw_0'
        
## Bundle 4: start_cycle=3, duration_in_cycles=1:
 # gate 'rx12 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx12-mw_0:2-i,rx12-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=9 (static override): groupDigOut=0x00090000
  # slot=2, instrument='mw_0': lastEndCycle=3, startCycle=3, slotDurationInCycles=1
[2]             seq_out         0x80090000,1            # cycle 3-4: code word/mask on 'mw_0'
        
## Bundle 5: start_cycle=4, duration_in_cycles=1:
 # gate 'rx12 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx12-mw_0:2-i,rx12-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=9 (static override): groupDigOut=0x00090000
  # slot=2, instrument='mw_0': lastEndCycle=4, startCycle=4, slotDurationInCycles=1
[2]             seq_out         0x80090000,1            # cycle 4-5: code word/mask on 'mw_0'
        
## Bundle 6: start_cycle=5, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=5, startCycle=5, slotDurationInCycles=1
[2]             seq_out         0x80040000,1            # cycle 5-6: code word/mask on 'mw_0'
        
## Bundle 7: start_cycle=6, duration_in_cycles=1:
 # gate 'rx12 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx12-mw_0:2-i,rx12-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=9 (static override): groupDigOut=0x00090000
  # slot=2, instrument='mw_0': lastEndCycle=6, startCycle=6, slotDurationInCycles=1
[2]             seq_out         0x80090000,1            # cycle 6-7: code word/mask on 'mw_0'
        
## Bundle 8: start_cycle=7, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=7, startCycle=7, slotDurationInCycles=1
[2]             seq_out         0x80040000,1            # cycle 7-8: code word/mask on 'mw_0'
        
## Bundle 9: start_cycle=8, duration_in_cycles=1:
 # gate 'rx12 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx12-mw_0:2-i,rx12-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=9 (static override): groupDigOut=0x00090000
  # slot=2, instrument='mw_0': lastEndCycle=8, startCycle=8, slotDurationInCycles=1
[2]             seq_out         0x80090000,1            # cycle 8-9: code word/mask on 'mw_0'
        
## Bundle 10: start_cycle=9, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=9, startCycle=9, slotDurationInCycles=1
[2]             seq_out         0x80040000,1            # cycle 9-10: code word/mask on 'mw_0'
        
## Bundle 11: start_cycle=10, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 12: start_cycle=11, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=10, startCycle=11, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 10-11: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 11-12: code word/mask on 'mw_0'
        
## Bundle 13: start_cycle=12, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 14: start_cycle=13, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=12, startCycle=13, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 12-13: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 13-14: code word/mask on 'mw_0'
        
## Bundle 15: start_cycle=14, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 16: start_cycle=15, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=14, startCycle=15, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 14-15: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 15-16: code word/mask on 'mw_0'
        
## Bundle 17: start_cycle=16, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 18: start_cycle=17, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=16, startCycle=17, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 16-17: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 17-18: code word/mask on 'mw_0'
        
## Bundle 19: start_cycle=18, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 20: start_cycle=19, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=18, startCycle=19, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 18-19: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 19-20: code word/mask on 'mw_0'
        
## Bundle 21: start_cycle=20, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 22: start_cycle=21, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=20, startCycle=21, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 20-21: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 21-22: code word/mask on 'mw_0'
        
## Bundle 23: start_cycle=22, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 24: start_cycle=23, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=22, startCycle=23, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 22-23: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 23-24: code word/mask on 'mw_0'
        
## Bundle 25: start_cycle=24, duration_in_cycles=1:
 # gate 'i 2'
        
## Bundle 26: start_cycle=25, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=24, startCycle=25, slotDurationInCycles=1
[2]             seq_out         0x00000000,1            # cycle 24-25: padding on 'mw_0'
[2]             seq_out         0x80040000,1            # cycle 25-26: code word/mask on 'mw_0'
        
## Bundle 27: start_cycle=26, duration_in_cycles=1:
 # gate 'rx12 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx12-mw_0:2-i,rx12-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=9 (static override): groupDigOut=0x00090000
  # slot=2, instrument='mw_0': lastEndCycle=26, startCycle=26, slotDurationInCycles=1
[2]             seq_out         0x80090000,1            # cycle 26-27: code word/mask on 'mw_0'
        
## Bundle 28: start_cycle=27, duration_in_cycles=1:
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=27, startCycle=27, slotDurationInCycles=1
[2]             seq_out         0x80040000,1            # cycle 27-28: code word/mask on 'mw_0'
        
## Bundle 29: start_cycle=28, duration_in_cycles=1:
 # gate 'i 0'
 # gate 'rx12 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx12-mw_0:2-i,rx12-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=2: codeword=9 (static override): groupDigOut=0x00090000
  # slot=2, instrument='mw_0': lastEndCycle=28, startCycle=28, slotDurationInCycles=1
[2]             seq_out         0x80090000,1            # cycle 28-29: code word/mask on 'mw_0'
        
## Bundle 30: start_cycle=29, duration_in_cycles=1:
 # gate 'ry90 q0 0'
  # slot=2, instrument='mw_0', group=0': signal='[ry90 q0-mw_0:0-i,ry90 q0-mw_0:0-q]'
 # gate 'ry90 q2 2'
  # slot=2, instrument='mw_0', group=2': signal='[ry90 q2-mw_0:2-i,ry90 q2-mw_0:2-q]'
  # slot=2, instrument='mw_0', group=0: codeword=4 (static override): groupDigOut=0x00000004
  # slot=2, instrument='mw_0', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=2, instrument='mw_0': lastEndCycle=29, startCycle=29, slotDurationInCycles=1
[2]             seq_out         0x80040004,1            # cycle 29-30: code word/mask on 'mw_0'
        
## Bundle 31: start_cycle=30, duration_in_cycles=3:
 # gate 'sf_cz_se q0 0'
  # slot=4, instrument='flux_0', group=0': signal='[flux-0-0]'
 # gate 'sf_cz_nw q2 2'
  # slot=4, instrument='flux_0', group=2': signal='[flux-0-2]'
  # slot=4, instrument='flux_0', group=0: codeword=2 (static override): groupDigOut=0x00000002
  # slot=4, instrument='flux_0', group=2: codeword=4 (static override): groupDigOut=0x00000100
  # slot=4, instrument='flux_0': lastEndCycle=0, startCycle=30, slotDurationInCycles=3
[4]             seq_out         0x00000000,30           # cycle 0-30: padding on 'flux_0'
[4]             seq_out         0x80000102,3            # cycle 30-33: code word/mask on 'flux_0'
        
## Bundle 32: start_cycle=32, duration_in_cycles=1:
 # gate 'i 1'
        
## Bundle 33: start_cycle=33, duration_in_cycles=1:
 # gate 'rx180 2'
  # slot=2, instrument='mw_0', group=2': signal='[rx180-mw_0:2-i,rx180-mw_0:2-q]'
 # gate 'ry90 q1 1'
  # slot=2, instrument='mw_0', group=1': signal='[ry90 q1-mw_0:1-i,ry90 q1-mw_0:1-q]'
  # slot=2, instrument='mw_0', group=1: codeword=4 (static override): groupDigOut=0x00000200
  # slot=2, instrument='mw_0', group=2: codeword=1 (static override): groupDigOut=0x00010000
  # slot=2, instrument='mw_0': lastEndCycle=30, startCycle=33, slotDurationInCycles=1
[2]             seq_out         0x00000000,3            # cycle 30-33: padding on 'mw_0'
[2]             seq_out         0x80010200,1            # cycle 33-34: code word/mask on 'mw_0'
        
## Bundle 34: start_cycle=34, duration_in_cycles=3:
 # gate 'sf_cz_sw q1 1'
  # slot=4, instrument='flux_0', group=1': signal='[flux-0-1]'
 # gate 'sf_cz_ne q2 2'
  # slot=4, instrument='flux_0', group=2': signal='[flux-0-2]'
  # slot=4, instrument='flux_0', group=1: codeword=3 (static override): groupDigOut=0x00000018
  # slot=4, instrument='flux_0', group=2: codeword=1 (static override): groupDigOut=0x00000040
  # slot=4, instrument='flux_0': lastEndCycle=33, startCycle=34, slotDurationInCycles=3
[4]             seq_out         0x00000000,1            # cycle 33-34: padding on 'flux_0'
[4]             seq_out         0x80000058,3            # cycle 34-37: code word/mask on 'flux_0'
        
## Bundle 35: start_cycle=37, duration_in_cycles=1:
 # gate 'i 3'
 # gate 'ry270 q1 1'
  # slot=2, instrument='mw_0', group=1': signal='[ry270 q1-mw_0:1-i,ry270 q1-mw_0:1-q]'
 # gate 'ry270 q0 0'
  # slot=2, instrument='mw_0', group=0': signal='[ry270 q0-mw_0:0-i,ry270 q0-mw_0:0-q]'
 # last bundle of kernel, will pad outputs to match durations
[0]             seq_out         0x00000000,38           # cycle 0-38: padding on 'ro_1'
[1]             seq_out         0x00000000,38           # cycle 0-38: padding on 'ro_2'
  # slot=2, instrument='mw_0', group=0: codeword=6 (static override): groupDigOut=0x00000006
  # slot=2, instrument='mw_0', group=1: codeword=6 (static override): groupDigOut=0x00000300
  # slot=2, instrument='mw_0': lastEndCycle=34, startCycle=37, slotDurationInCycles=1
[2]             seq_out         0x00000000,3            # cycle 34-37: padding on 'mw_0'
[2]             seq_out         0x80000306,1            # cycle 37-38: code word/mask on 'mw_0'
[3]             seq_out         0x00000000,38           # cycle 0-38: padding on 'mw_1'
[4]             seq_out         0x00000000,1            # cycle 37-38: padding on 'flux_0'
        
### Kernel: 'esc_meas_block_4'
## Bundle 36: start_cycle=1, duration_in_cycles=150:
 # READOUT: measure(q4)
  # slot=0, instrument='ro_1', group=3': signal='[dummy]'
 # READOUT: measure(q3)
  # slot=0, instrument='ro_1', group=2': signal='[dummy]'
 # READOUT: measure(q2)
  # slot=0, instrument='ro_1', group=1': signal='[dummy]'
 # READOUT: measure(q1)
  # slot=1, instrument='ro_2', group=0': signal='[dummy]'
 # READOUT: measure(q0)
  # slot=0, instrument='ro_1', group=0': signal='[dummy]'
 # last bundle of kernel, will pad outputs to match durations
  # slot=0, instrument='ro_1': lastEndCycle=0, startCycle=1, slotDurationInCycles=150
[0]             seq_out         0x00000000,1            # cycle 0-1: padding on 'ro_1'
[0]             seq_out         0x001f0000,150          # cycle 1-151: code word/mask on 'ro_1'
# digIn=30
  # slot=1, instrument='ro_2': lastEndCycle=0, startCycle=1, slotDurationInCycles=150
[1]             seq_out         0x00000000,1            # cycle 0-1: padding on 'ro_2'
[1]             seq_out         0x00030000,150          # cycle 1-151: code word/mask on 'ro_2'
# digIn=2
[2]             seq_out         0x00000000,151          # cycle 0-151: padding on 'mw_0'
[3]             seq_out         0x00000000,151          # cycle 0-151: padding on 'mw_1'
[4]             seq_out         0x00000000,151          # cycle 0-151: padding on 'flux_0'
        
                jmp             @mainLoop               # loop indefinitely
