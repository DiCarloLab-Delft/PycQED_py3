{
    // author: Wouter Vlothuizen
    // notes:  see https://openql.readthedocs.io/en/latest/platform.html#ccplatform for documentation of this file

    "eqasm_compiler" : "eqasm_backend_cc",

    "hardware_settings": {
        "qubit_number": 17,
        "cycle_time" : 20,        // in [ns]

        "eqasm_backend_cc": {
            // Immutable properties of instruments.
            "instrument_definitions": {
                "qutech-qwg": {
                    "channels": 4,
                    "control_group_sizes": [1, 4]
                },
                "zi-hdawg": {
                    "channels": 8,
                    "control_group_sizes": [1, 2, 4, 8] // NB: size=1 needs special treatment of waveforms because one AWG unit drives 2 channels
                },
                "qutech-vsm": {
                    "channels": 32,
                    "control_group_sizes": [1]
                },
                "zi-uhfqa": {
                    "channels": 9,
                    "control_group_sizes": [1]
                }
            },   // instrument_definitions



            // Modes to control instruments. These define which bits are used to control groups of channels
            // and/or get back measurement results.
            "control_modes": {
                "awg8-mw-vsm-hack": {                     // ZI_HDAWG8.py::cfg_codeword_protocol() == 'microwave'. Old hack to skip DIO[8]
                    "control_bits": [
                        [7,6,5,4,3,2,1,0],                // group 0
                        [16,15,14,13,12,11,10,9]          // group 1
                    ],
                    "trigger_bits": [31]
                },
                "awg8-mw-vsm": {                          // the way the mode above should have been
                    "control_bits": [
                        [7,6,5,4,3,2,1,0],                // group 0
                        [23,22,21,20,19,18,17,16]           // group 1
                    ],
                    "trigger_bits": [31,15]
                },
                "awg8-mw-direct-iq": {                    // just I&Q to generate microwave without VSM. HDAWG8: "new_novsm_microwave"
                    "control_bits": [
                        [6,5,4,3,2,1,0],                  // group 0
                        [13,12,11,10,9,8,7],              // group 1
                        [22,21,20,19,18,17,16],           // group 2. NB: starts at bit 16 so twin-QWG can also support it
                        [29,28,27,26,25,24,23]            // group 4
                    ],
                    "trigger_bits": [31]
                },
                "awg8-flux": {                             // ZI_HDAWG8.py::cfg_codeword_protocol() == 'flux'
                    // NB: please note that internally one AWG unit handles 2 channels, which requires special handling of the waveforms
                    "control_bits": [
                        [2,1,0],                          // group 0
                        [5,4,3],
                        [8,7,6],
                        [11,10,9],
                        [18,17,16],                       // group 4. NB: starts at bit 16 so twin-QWG can also support it
                        [21,20,19],
                        [24,23,22],
                        [27,26,25]                        // group 7
                    ],
                    "trigger_bits": [31]
                },
                "awg8-flux-vector-8": {                    // single code word for 8 flux channels. FIXME: no official mode yet
                    "control_bits": [
                        [7,6,5,4,3,2,1,0]     // FIXME: how many bits are available
                    ],
                    "trigger_bits": [31,15]
                },
                "uhfqa-9ch": {
                    "control_bits": [[17],[18],[19],[20],[21],[22],[23],[24],[25]],    // group[0:8]
                    "trigger_bits": [16],
                    "result_bits": [[1],[2],[3],[4],[5],[6],[7],[8],[9]],              // group[0:8]
                    "data_valid_bits": [0]
                },
                "vsm-32ch":{
                    "control_bits": [
                        [0],[1],[2],[3],[4],[5],[6],[7],                      // group[0:7]
                        [8],[9],[10],[11],[12],[13],[14],[15],                // group[8:15]
                        [16],[17],[18],[19],[20],[21],[22],[23],              // group[16:23]
                        [24],[25],[26],[27],[28],[28],[30],[31]               // group[24:31]
                    ],
                    "trigger_bits": []                                       // no trigger
                }
            },   // control_modes



            // Signal library that gate definitions can refer to.
            "signals": {
                "single-qubit-mw": [
                    {   "type": "mw",
                        "operand_idx": 0,
                        "value": [
                            "{gateName}-{instrumentName}:{instrumentGroup}-i",
                            "{gateName}-{instrumentName}:{instrumentGroup}-q"
                        ]
                    }
                ],
                "two-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    }
                    // FIXME: CZ(a,b) and CZ(a,c) requires different waveforms on a
                ],
                "single-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,
                        "value": ["flux-0-{qubit}"]
                    }
                ]
            },  // signals



            // Instruments used in this setup, their configuration and connectivity.
            "instruments": [
                // readout.
                {
                    "name": "ro_0",
                    "qubits": [[1], [4], [5], [8], [10], [7], [11], [14], [15]],
                    "signal_type": "measure",
                    "ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 2,
                        "io_module": "CC-CONN-DIO"
                    }
                },
                {
                    "name": "ro_1",
                    "qubits": [[0], [2], [3], [6], [9], [12], [], [], []],
                    "signal_type": "measure",
                    "ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 4,
                        "io_module": "CC-CONN-DIO"
                    }
                },
                {
                    "name": "ro_2",
                    "qubits": [[13], [16], [], [], [], [], [], [], []],
                    "signal_type": "measure",
                    "ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 5,
                        "io_module": "CC-CONN-DIO"
                    }
                },

                // microwave.
                {
                    "name": "mw_0",
                    "qubits": [                                             // data qubits:
                        [8],
                        [9],
                        [14],
                        [15]
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 0,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_1",
                    "qubits": [                                             // ancilla qubits:
                        [11],
                        [10],
                        [12],
                        []
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 1,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_2",
                    "qubits": [                                             // data qubits:
                        [0],
                        [1],
                        [2],
                        [3]
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 6,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_3",
                    "qubits": [                                             // ancilla qubits:
                        [4],
                        [5],
                        [6],
                        [7]
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 7,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_4",
                    "qubits": [                                             // ancilla qubits:
                        [13],
                        [16],
                        [],
                        []
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 8,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                // flux
                {
                    "name": "flux_0",
                    "qubits": [[8], [9], [10], [11], [12], [13], [14], [15]],
                    "signal_type": "flux",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
//                    "ref_control_mode": "awg8-flux-vector-8",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 3,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "flux_1",
                    "qubits": [[0], [1], [2], [3], [4], [5], [6], [7]],
                    "signal_type": "flux",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
//                    "ref_control_mode": "awg8-flux-vector-8",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 9,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "flux_2",
                    "qubits": [[16], [], [], [], [], [], [], []],
                    "signal_type": "flux",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
//                    "ref_control_mode": "awg8-flux-vector-8",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 10,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                }
            ] // instruments
        }
    },



    // extracted from PyqQED_py3 'generate_CCL_cfg.py'
    "gate_decomposition": {
        "x %0": ["rx180 %0"],
        "y %0": ["ry180 %0"],
        "roty90 %0": ["ry90 %0"],

        // To support other forms of writing the same gates
        "x180 %0": ["rx180 %0"],
        "y180 %0": ["ry180 %0"],
        "y90 %0": ["ry90 %0"],
        "x90 %0": ["rx90 %0"],
        "my90 %0": ["rym90 %0"],
        "mx90 %0": ["rxm90 %0"],

        // Clifford decomposition per Epstein et al. Phys. Rev. A 89, 062321 (2014)
        "cl_0 %0": ["i %0"],
        "cl_1 %0": ["ry90 %0", "rx90 %0"],
        "cl_2 %0": ["rxm90 %0", "rym90 %0"],
        "cl_3 %0": ["rx180 %0"],
        "cl_4 %0": ["rym90 %0", "rxm90 %0"],
        "cl_5 %0": ["rx90 %0", "rym90 %0"],
        "cl_6 %0": ["ry180 %0"],
        "cl_7 %0": ["rym90 %0", "rx90 %0"],
        "cl_8 %0": ["rx90 %0", "ry90 %0"],
        "cl_9 %0": ["rx180 %0", "ry180 %0"],
        "cl_10 %0": ["ry90 %0", "rxm90 %0"],
        "cl_11 %0": ["rxm90 %0", "ry90 %0"],
        "cl_12 %0": ["ry90 %0", "rx180 %0"],
        "cl_13 %0": ["rxm90 %0"],
        "cl_14 %0": ["rx90 %0", "rym90 %0", "rxm90 %0"],
        "cl_15 %0": ["rym90 %0"],
        "cl_16 %0": ["rx90 %0"],
        "cl_17 %0": ["rx90 %0", "ry90 %0", "rx90 %0"],
        "cl_18 %0": ["rym90 %0", "rx180 %0"],
        "cl_19 %0": ["rx90 %0", "ry180 %0"],
        "cl_20 %0": ["rx90 %0", "rym90 %0", "rx90 %0"],
        "cl_21 %0": ["ry90 %0"],
        "cl_22 %0": ["rxm90 %0", "ry180 %0"],
        "cl_23 %0": ["rx90 %0", "ry90 %0", "rxm90 %0"],

        // CC additions
        // "cz q8,q10": ["barrier q8,q10,q11", "sf_cz_sw q8", "sf_cz_ne q10", "sf_park q11", "barrier q8,q10,q11"],
        // "cz q10,q8": ["barrier q8,q10,q11", "sf_cz_sw q8", "sf_cz_ne q10", "sf_park q11", "barrier q8,q10,q11"],
        "cz q8,q10": ["barrier q8,q10,q11", "sf_cz_sw q8", "sf_cz_ne q10", "sf_park q11", "barrier q8,q10,q11", "phase_corr_sw q8", "phase_corr_ne q10", "barrier q8,q10,q11"],
        "cz q10,q8": ["barrier q8,q10,q11", "sf_cz_sw q8", "sf_cz_ne q10", "sf_park q11", "barrier q8,q10,q11", "phase_corr_sw q8", "phase_corr_ne q10", "barrier q8,q10,q11"],

        // "cz q8,q11": ["barrier q8,q10,q11", "sf_cz_se q8", "sf_cz_nw q11", "sf_park q10", "barrier q8,q10,q11"],
        // "cz q11,q8": ["barrier q8,q10,q11", "sf_cz_se q8", "sf_cz_nw q11", "sf_park q10", "barrier q8,q10,q11"],
        "cz q8,q11": ["barrier q8,q10,q11", "sf_cz_se q8", "sf_cz_nw q11", "sf_park q10", "barrier q8,q10,q11", "phase_corr_se q8", "phase_corr_nw q11", "barrier q8,q10,q11"],
        "cz q11,q8": ["barrier q8,q10,q11", "sf_cz_se q8", "sf_cz_nw q11", "sf_park q10", "barrier q8,q10,q11", "phase_corr_se q8", "phase_corr_nw q11", "barrier q8,q10,q11"],

        // "cz q11,q14":["barrier q11,q14,q15", "sf_cz_sw q11", "sf_cz_ne q14", "sf_park q15", "barrier q11,q14,q15"],
        // "cz q14,q11":["barrier q11,q14,q15", "sf_cz_sw q11", "sf_cz_ne q14", "sf_park q15", "barrier q11,q14,q15"],
        "cz q11,q14":["barrier q8,q11,q14,q15", "sf_cz_sw q11", "sf_cz_ne q14", "sf_park q15", "rx180 q8", "barrier q8,q11,q14,q15", "phase_corr_sw q11", "phase_corr_ne q14", "phase_corr_park q15", "rx180 q8", "barrier q8,q11,q14,q15"],
        "cz q14,q11":["barrier q8,q11,q14,q15", "sf_cz_sw q11", "sf_cz_ne q14", "sf_park q15", "rx180 q8", "barrier q8,q11,q14,q15", "phase_corr_sw q11", "phase_corr_ne q14", "phase_corr_park q15", "rx180 q8", "barrier q8,q11,q14,q15"],

        // "cz q10,q14":["barrier q10,q14", "sf_cz_se q10", "sf_cz_nw q14", "barrier q10,q14"],
        // "cz q14,q10":["barrier q10,q14", "sf_cz_se q10", "sf_cz_nw q14", "barrier q10,q14"],
        "cz q10,q14":["barrier q10,q14", "sf_cz_se q10", "sf_cz_nw q14", "barrier q10,q14", "phase_corr_se q10", "phase_corr_nw q14", "barrier q10,q14"],
        "cz q14,q10":["barrier q10,q14", "sf_cz_se q10", "sf_cz_nw q14", "barrier q10,q14", "phase_corr_se q10", "phase_corr_nw q14", "barrier q10,q14"],

        // "cz q9,q11": ["barrier q9,q11,q12", "sf_cz_sw q9", "sf_cz_ne q11", "sf_park q12", "barrier q9,q11,q12"],
        // "cz q11,q9": ["barrier q9,q11,q12", "sf_cz_sw q9", "sf_cz_ne q11", "sf_park q12", "barrier q9,q11,q12"],
        "cz q9,q11": ["barrier q9,q11,q12", "sf_cz_sw q9", "sf_cz_ne q11", "sf_park q12", "barrier q9,q11,q12", "phase_corr_sw q9", "phase_corr_ne q11", "barrier q9,q11,q12"],
        "cz q11,q9": ["barrier q9,q11,q12", "sf_cz_sw q9", "sf_cz_ne q11", "sf_park q12", "barrier q9,q11,q12", "phase_corr_sw q9", "phase_corr_ne q11", "barrier q9,q11,q12"],

        // "cz q9,q12": ["barrier q9,q11,q12", "sf_cz_se q9", "sf_cz_nw q12", "sf_park q11", "barrier q9,q11,q12"],
        // "cz q12,q9": ["barrier q9,q11,q12", "sf_cz_se q9", "sf_cz_nw q12", "sf_park q11", "barrier q9,q11,q12"],
        "cz q9,q12": ["barrier q9,q11,q12", "sf_cz_se q9", "sf_cz_nw q12", "sf_park q11", "barrier q9,q11,q12", "phase_corr_se q9", "phase_corr_nw q12", "barrier q9,q11,q12"],
        "cz q12,q9": ["barrier q9,q11,q12", "sf_cz_se q9", "sf_cz_nw q12", "sf_park q11", "barrier q9,q11,q12", "phase_corr_se q9", "phase_corr_nw q12", "barrier q9,q11,q12"],

        // "cz q11,q15":["barrier q11,q14,q15", "sf_cz_se q11", "sf_cz_nw q15", "sf_park q14", "barrier q11,q14,q15"],
        // "cz q15,q11":["barrier q11,q14,q15", "sf_cz_se q11", "sf_cz_nw q15", "sf_park q14", "barrier q11,q14,q15"],
        "cz q11,q15":["barrier q8,q11,q14,q15", "sf_cz_se q11", "sf_cz_nw q15", "sf_park q14", "rx180 q8", "barrier q8,q11,q14,q15", "phase_corr_se q11", "phase_corr_nw q15", "phase_corr_park q14", "rx180 q8", "barrier q8,q11,q14,q15"],
        "cz q15,q11":["barrier q8,q11,q14,q15", "sf_cz_se q11", "sf_cz_nw q15", "sf_park q14", "rx180 q8", "barrier q8,q11,q14,q15", "phase_corr_se q11", "phase_corr_nw q15", "phase_corr_park q14", "rx180 q8", "barrier q8,q11,q14,q15"],

        // "cz q12,q15":["barrier q12,q15", "sf_cz_sw q12", "sf_cz_ne q15", "barrier q12,q15"],
        // "cz q15,q12":["barrier q12,q15", "sf_cz_sw q12", "sf_cz_ne q15", "barrier q12,q15"],
        "cz q12,q15":["barrier q12,q15", "sf_cz_sw q12", "sf_cz_ne q15", "barrier q12,q15", "phase_corr_sw q12", "phase_corr_ne q15", "barrier q12,q15"],
        "cz q15,q12":["barrier q12,q15", "sf_cz_sw q12", "sf_cz_ne q15", "barrier q12,q15", "phase_corr_sw q12", "phase_corr_ne q15", "barrier q12,q15"],

        "measure_fb %0": ["measure %0", "_wait_uhfqa %0", "_dist_dsm %0", "_wait_dsm %0"],
        "rx2theta %0": ["cw_27 %0"],
        "rxm2theta %0": ["cw_28 %0"],
        "rx2thetaalpha %0": ["cw_29 %0"],
        "rphi180 %0": ["cw_27 %0"],
        "rphi180beta %0": ["cw_28 %0"],
        "rx180beta %0": ["cw_29 %0"],
        "rphi180beta2 %0": ["cw_30 %0"],
        "ry90beta %0": ["cw_28 %0"],
        "rym90alpha %0": ["cw_29 %0"],
		"ry90betapi %0": ["cw_30 %0"],
		"rphi180alpha %0": ["cw_31 %0"],
		"rx90alpha %0": ["cw_26 %0"],
		"rx180alpha2 %0": ["cw_25 %0"],
        "rphim2theta %0": ["cw_28 %0"],
        "rY2theta %0": ["cw_29 %0"],
        "rphi180pi2 %0": ["cw_31 %0"],
        "rx2b %0": ["cw_09 %0"],
		"rxw1 %0": ["cw_10 %0"],
		"rxw2 %0": ["cw_11 %0"],
        "ry2b %0": ["cw_12 %0"],
        "ryw1 %0": ["cw_13 %0"],
        "ryw2 %0": ["cw_14 %0"],
        "rphim45 %0": ["cw_15 %0"],
        "rphi45 %0":  ["cw_16 %0"],
        "rphi135m90 %0": ["cw_17 %0"],
        "rphi13590 %0": ["cw_18 %0"],
        "rmx180 %0": ["cw_29 %0"],
        "rmy180 %0": ["cw_30 %0"],
        "rxm45 %0": ["cw_27 %0"],
        "rx45 %0": ["cw_28 %0"]
    },


    // User defined instruction set.
    "instructions": {
        // based on PyqQED_py3 'mw_lutman.py' and 'generate_CCL_cfg.py':
        // FIXME: also add conditional single qubit gates?
        "i": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
//                "ref_signal": "single-qubit-mw",
                "signal": [],   // no signal, to prevent conflicts with other gates (NB: will output nothing because VSM stays off)
                "static_codeword_override": [0]
            }
        },
        "rx45": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",    // NB: reference, instead of defining "signal" here
                "static_codeword_override": [13]
            }
        },
        "rx180": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",    // NB: reference, instead of defining "signal" here
                "static_codeword_override": [1]
            }
        },
        "rx180 q8": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",    // NB: reference, instead of defining "signal" here
                "static_codeword_override": [1]
            }
        },
        "ry180": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "rx90": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "ry90": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "rxm90": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "rym90": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "phase_corr_nw q11": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_nw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [60]
            }
        },
        "phase_corr_nw q12": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_nw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [60]
            }
        },
        "phase_corr_nw q14": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_nw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [60]
            }
        },
        "phase_corr_nw q15": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_nw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [60]
            }
        },
        "phase_corr_ne q10": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_ne",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [61]
            }
        },
        "phase_corr_ne q11": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_ne",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [61]
            }
        },
        "phase_corr_ne q14": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_ne",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [61]
            }
        },
        "phase_corr_ne q15": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_ne",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [61]
            }
        },
        "phase_corr_sw q8": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_sw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [62]
            }
        },
        "phase_corr_sw q9": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_sw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [62]
            }
        },
        "phase_corr_sw q11": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_sw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [62]
            }
        },
        "phase_corr_sw q12": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_sw",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [62]
            }
        },
        "phase_corr_se q8": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_se",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [63]
            }
        },
        "phase_corr_se q9": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_se",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [63]
            }
        },
        "phase_corr_se q10": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_se",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [63]
            }
        },
        "phase_corr_se q11": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_se",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [63]
            }
        },
        "phase_corr_park q14": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_park",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [59]
            }
        },
        "phase_corr_park q15": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "phase_corr_park",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [59]
            }
        },
        "sf_cz_ne q10": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "sf_cz_ne q11": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "sf_cz_ne q14": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "sf_cz_ne q15": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "sf_cz_nw q11": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "sf_cz_nw q12": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "sf_cz_nw q14": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "sf_cz_nw q15": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "sf_cz_sw q8": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "sf_cz_sw q9": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "sf_cz_sw q11": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "sf_cz_sw q12": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "sf_cz_se q8": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "sf_cz_se q9": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "sf_cz_se q10": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "sf_cz_se q11": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "sf_park q11": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_park q12": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_park q14": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_park q15": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_park q13": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_park q10": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "cz_park": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "signal": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 2,                                   // park
                        "value": ["park_cz-{qubit}"]
                    }
                ],
                "static_codeword_override": [0,0,0]   // FIXME
            }
        },

        // additions from 'CC-software-implementation.docx'
        // flux pulses, see:
        // - https://github.com/QE-Lab/OpenQL/issues/176
        // - https://github.com/QE-Lab/OpenQL/issues/224
        // - https://github.com/QE-Lab/OpenQL/pull/238

        "park_cz" : { // park signal with same length as cz gate
            "duration" : @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "measure",      // FIXME
            "visual_type": "x",
            "cc": {
                "signal": [
                    {   "type": "flux",
                        "operand_idx": 0,
                        "value": ["park_cz-{qubit}"]
                    }
                ],
                "static_codeword_override": [0]   // FIXME
            }
        },

        "park_measure" : { // park signal with same length as measurement
            "duration" : @RO_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "visual_type": "measz",
            "cc": {
                "signal": [
                    {   "type": "flux",
                        "operand_idx": 0,
                        "value": ["park_measure-{qubit}"]
                    }
                ],
                "static_codeword_override": [0]   // FIXME
            }
        },


        // based on PyqQED_py3 'generate_CCL_cfg.py':
        "prepz": {
            "duration": @INIT_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "readout",
            "visual_type": "prepz",
            "cc": {
//                "ref_signal": "single-qubit-mw"
                "signal": [],    // FIXME: no signal, pycQED::test_multi_qubit_oql_CC.py fails otherwise on scheduling issues
                "static_codeword_override": [0]   // FIXME
            }
        },

        "measure": {
            "duration": @RO_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "readout",
            "visual_type": "measz",
            "cc": {
                "signal": [
                    {   "type": "measure",
                        "operand_idx": 0,
                        "value": ["dummy"]          // Future extension: specify output and weight, and generate code word
                    }
                ],
                "static_codeword_override": [0]   // FIXME
            }
        },

        // additions for pycQED::test_single_qubit_oql_CC.py
        // FIXME: contents untested
        "square": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [10]
            }
        },
        "spec": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "rx12": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        // cw_00 .. cw_31
        "cw_00": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_01": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },
        "cw_02": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "cw_03": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "cw_04": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "cw_05": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "cw_06": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "cw_07": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [7]
            }
        },
        "cw_08": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [8]
            }
        },
        "cw_09": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [9]
            }
        },
        "cw_10": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [10]
            }
        },
        "cw_11": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [11]
            }
        },
        "cw_12": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [12]
            }
        },
        "cw_13": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [13]
            }
        },
        "cw_14": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [14]
            }
        },
        "cw_15": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [15]
            }
        },
        "cw_16": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [16]
            }
        },
        "cw_17": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [17]
            }
        },
        "cw_18": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [18]
            }
        },
        "cw_19": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [19]
            }
        },
        "cw_20": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [20]
            }
        },
        "cw_21": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [21]
            }
        },
        "cw_22": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [22]
            }
        },
        "cw_23": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [23]
            }
        },
        "cw_24": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [24]
            }
        },
        "cw_25": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [25]
            }
        },
        "cw_26": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [26]
            }
        },
        "cw_27": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [27]
            }
        },
        "cw_28": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [28]
            }
        },
        "cw_29": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [29]
            }
        },
        "cw_30": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [30]
            }
        },
        "cw_31": {
            "duration": @MW_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "mw",
            "visual_type": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [31]
            }
        },
        // fl_cw_00 .. fl_cw_07
        "fl_cw_00": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [0,0]   // FIXME
            }
        },
        "fl_cw_01": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "fl_cw_02": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "fl_cw_03": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "fl_cw_04": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "fl_cw_05": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "fl_cw_06": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [6]
            }
        },
        "fl_cw_07": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [7]
            }
        },

        // single qubit flux hacks (compatible with QCC demo/flux lutman)
        "sf_square": {
            "duration": @FLUX_DURATION@,
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "type": "flux",
            "visual_type": "sqf",
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [6]
            }
        },
        // i believe 300 is the minimum, should be checked with scope (see is fluxes arent dead)
        "_wait_dsm": {
            "duration": 340, //used to be 300
            "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
            "visual_type": "x",
            "cc": {
                "signal": []
            }
        },
        // cannot be any shorter according to Wouter
        "if_1_break": {
      			"duration": 80, //used to be 60
      			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
      			"visual_type": "x",
      			"cc": {
      				"signal": [],
      				"pragma": {
                          "break": 1
      				}
      			}
      		},
      		// cannot be any shorter according to Wouter
      		"if_0_break": {
      			"duration": 80, //used to be 60
      			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
      			"visual_type": "x",
      			"cc": {
      				"signal": [],
      				"pragma": {
                          "break": 0
      				}
      			}
      		},
    		// the smallest value was empirically found to be 560 ns
    		"_wait_uhfqa": {
                "duration": 800, // used to be 560
                "matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
                "visual_type": "x",
                "cc": {
                    "signal": []
                }
            },
            // cannot be any shorter
            "_dist_dsm": {
    			"duration": 40, //used to be 20
    			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
    			"visual_type": "x",
    			"cc": {
    			    "readout_mode": "feedback",
    				"signal": [
    					{	"type": "measure",
    						"operand_idx": 0,
    						"value": []
    					}
            ]
          }
       }
    },	// end of "instructions"


    // NB: the "topology" keyword must be present, but the contents are only interpreted by
    // the 'resource constraint' scheduler, which we don't use
    "topology": {
    },


    // NB: the "resources" keyword must be present, but the contents are only interpreted by
    // the 'resource constraint' scheduler, which we don't use
    "resources": {
    }
}
