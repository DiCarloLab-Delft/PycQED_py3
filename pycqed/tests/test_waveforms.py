import numpy as np
import unittest
import warnings
from pycqed.measurement.waveform_control_CC import waveform as wf


class Test_Waveforms(unittest.TestCase):

    def test_gauss_pulse(self):

        g_env = np.array([0.,  0.0056186,  0.01165567,
                          0.01812183,  0.02502537,
                          0.03237195,  0.04016432,  0.04840195,
                          0.05708081,  0.06619307,
                          0.07572687,  0.08566613,  0.09599033,
                          0.10667444,  0.11768883,
                          0.12899923,  0.14056679,  0.15234816,
                          0.16429566,  0.17635752,
                          0.18847815,  0.20059853,  0.21265661,
                          0.2245878,  0.2363255,
                          0.24780173,  0.2589477,  0.26969455,
                          0.27997397,  0.28971899,
                          0.29886465,  0.30734872,  0.31511243,
                          0.32210111,  0.32826488,
                          0.33355918,  0.33794536,  0.3413911,
                          0.34387088,  0.3453662,
                          0.34586589,  0.3453662,  0.34387088,
                          0.3413911,  0.33794536,
                          0.33355918,  0.32826488,  0.32210111,
                          0.31511243,  0.30734872,
                          0.29886465,  0.28971899,  0.27997397,
                          0.26969455,  0.2589477,
                          0.24780173,  0.2363255,  0.2245878,
                          0.21265661,  0.20059853,
                          0.18847815,  0.17635752,  0.16429566,
                          0.15234816,  0.14056679,
                          0.12899923,  0.11768883,  0.10667444,
                          0.09599033,  0.08566613,
                          0.07572687,  0.06619307,  0.05708081,
                          0.04840195,  0.04016432,
                          0.03237195,  0.02502537,  0.01812183,
                          0.01165567,  0.0056186,  0.])

        d_env = np.array([0.07903581,  0.08505798,
                          0.09125043,  0.09758165,  0.10401556,
                          0.1105115,  0.11702435,  0.12350468,
                          0.12989903,  0.13615021,
                          0.14219778,  0.14797855,  0.15342718,
                          0.15847683,  0.16305997,
                          0.16710918,  0.17055799,  0.17334187,
                          0.17539911,  0.17667183,
                          0.17710695,  0.17665709,  0.17528151,
                          0.17294695,  0.16962842,
                          0.16530987,  0.15998481,  0.1536567,
                          0.14633934,  0.13805702,
                          0.12884455,  0.11874711,  0.10781999,
                          0.0961281,  0.08374538,
                          0.07075403,  0.0572436,  0.04331001,
                          0.02905436,  0.01458176,
                          -0., -0.01458176, -0.02905436, -
                          0.04331001, -0.0572436,
                          -0.07075403, -0.08374538, -
                          0.0961281, -0.10781999, -0.11874711,
                          -0.12884455, -0.13805702, -
                          0.14633934, -0.1536567, -0.15998481,
                          -0.16530987, -0.16962842, -
                          0.17294695, -0.17528151, -0.17665709,
                          -0.17710695, -0.17667183, -
                          0.17539911, -0.17334187, -0.17055799,
                          -0.16710918, -0.16305997, -
                          0.15847683, -0.15342718, -0.14797855,
                          -0.14219778, -0.13615021, -
                          0.12989903, -0.12350468, -0.11702435,
                          -0.1105115, -0.10401556, -
                          0.09758165, -0.09125043, -0.08505798,
                          -0.07903581])

        amplitude = .4  # something not equal to one to prevent some bugs
        motzoi = .73
        sigma = 20e-9

        I, Q = wf.gauss_pulse(amplitude, sigma, axis='x', nr_sigma=4,
                              sampling_rate=1e9,
                              motzoi=motzoi, delay=0)
        self.assertEqual(np.shape(I), np.shape(g_env))

        self.assertEqual(np.shape(Q), np.shape(d_env))

        np.testing.assert_almost_equal(I, g_env)
        np.testing.assert_almost_equal(Q, d_env)

        I, Q = wf.gauss_pulse(amplitude, sigma, axis='y', nr_sigma=4,
                              sampling_rate=1e9,
                              motzoi=motzoi, delay=0)
        np.testing.assert_almost_equal(I, -d_env)
        np.testing.assert_almost_equal(Q, g_env)

        I, Q = wf.gauss_pulse(amplitude, sigma, axis='x', phase=90,
                              nr_sigma=4,
                              sampling_rate=1e9,
                              motzoi=motzoi, delay=0)
        np.testing.assert_almost_equal(I, -d_env)
        np.testing.assert_almost_equal(Q, g_env)

    def test_martinis_flux_pulse(self):
        pass
        # This test is disabled and needs to be recreated as per issue #89
        # g2 = 1/(120e-9/(14.5/2))
        # f_bus = 4.8e9
        # f_01_max = 5.94e9
        # dac_flux_coefficient = 0.679
        # E_c = 369.2e6
        # theta_f = .4
        # length = 40e-9
        # lambda_coeffs_list = [[.1, 0], [.4, .2, .1, .01, .2]]
        # for lambda_coeffs in lambda_coeffs_list:

        #     th_pulse = wf.martinis_flux_pulse(
        #         length=length, theta_f=theta_f, lambda_coeffs=lambda_coeffs,
        #         g2=g2, E_c=E_c, f_01_max=f_01_max, f_bus=f_bus,
        #         dac_flux_coefficient=dac_flux_coefficient,
        #         return_unit='theta')
        #     V_pulse = wf.martinis_flux_pulse(
        #         length=length, theta_f=theta_f, lambda_coeffs=lambda_coeffs,
        #         g2=g2, E_c=E_c, f_01_max=f_01_max, f_bus=f_bus,
        #         dac_flux_coefficient=dac_flux_coefficient,
        #         return_unit='V')

        #     theta_0 = np.arctan(2*g2/(f_01_max-E_c-f_bus))
        #     np.testing.assert_almost_equal(theta_0, th_pulse[0])
        #     np.testing.assert_almost_equal(0, V_pulse[0])

        #     self.assertEqual(len(th_pulse), 40)
        #     np.testing.assert_almost_equal(np.max(th_pulse), theta_f)

        #     self.assertEqual(np.argmax(th_pulse), 20)
        #     self.assertEqual(np.argmax(V_pulse), 20)

    def test_martinis_flux_pulse_v2(self):
        length = 200e-9
        lambda_2 = 0.015
        lambda_3 = 0
        theta_f = 8
        f_01_max = 6.089e9
        J2 = 4.2e6
        E_c = 0
        dac_flux_coefficient = 1.7178
        f_interaction = 4.940e9
        f_bus = None
        asymmetry = 0
        sampling_rate = 1e9
        return_unit = 'V'

        theta_wave = wf.martinis_flux_pulse_v2(
            length=length,
            lambda_2=lambda_2,
            lambda_3=lambda_3,
            theta_f=theta_f,
            f_01_max=f_01_max,
            J2=J2,
            E_c=E_c,
            dac_flux_coefficient=dac_flux_coefficient,
            f_interaction=f_interaction,
            f_bus=f_bus,
            asymmetry=asymmetry,
            sampling_rate=sampling_rate,
            return_unit=return_unit)

        test_wave = np.array(
            [0.,  0.04646505,  0.09171303,  0.13467895, 0.17456015,
             0.21086228,  0.24338416,  0.27216213,  0.2973989,  0.31939588,
             0.33849906,  0.35506101,  0.36941732,  0.38187394,  0.39270201,
             0.40213731,  0.41038236,  0.41760968,  0.42396551,  0.42957353,
             0.4345382,  0.4389478,  0.44287703,  0.44638917,  0.44953799,
             0.45236929,  0.45492218,  0.45723016,  0.45932202,  0.46122256,
             0.46295323,  0.46453263,  0.46597693,  0.46730024,  0.46851491,
             0.46963176,  0.47066032,  0.47160899,  0.47248522,  0.47329559,
             0.47404596,  0.47474155,  0.47538702,  0.47598655,  0.47654388,
             0.47706238,  0.47754508,  0.47799471,  0.47841377,  0.47880449,
             0.47916891,  0.47950889,  0.47982613,  0.48012217,  0.48039843,
             0.4806562,  0.48089669,  0.48112098,  0.4813301,  0.48152499,
             0.48170651,  0.48187547,  0.48203263,  0.48217868,  0.48231428,
             0.48244004,  0.48255655,  0.48266433,  0.48276391,  0.48285576,
             0.48294035,  0.4830181,  0.48308944,  0.48315474,  0.4832144,
             0.48326877,  0.48331819,  0.48336298,  0.48340347,  0.48343995,
             0.48347272,  0.48350205,  0.4835282,  0.48355143,  0.48357198,
             0.48359008,  0.48360595,  0.48361979,  0.4836318,  0.48364215,
             0.48365102,  0.48365857,  0.48366493,  0.48367024,  0.4836746,
             0.48367812,  0.48368088,  0.48368296,  0.4836844,  0.48368525,
             0.48368553,  0.48368525,  0.4836844,  0.48368296,  0.48368088,
             0.48367812,  0.4836746,  0.48367024,  0.48366493,  0.48365857,
             0.48365102,  0.48364215,  0.4836318,  0.48361979,  0.48360595,
             0.48359008,  0.48357198,  0.48355143,  0.4835282,  0.48350205,
             0.48347272,  0.48343995,  0.48340347,  0.48336298,  0.48331819,
             0.48326877,  0.4832144,  0.48315474,  0.48308944,  0.4830181,
             0.48294035,  0.48285576,  0.48276391,  0.48266433,  0.48255655,
             0.48244004,  0.48231428,  0.48217868,  0.48203263,  0.48187547,
             0.48170651,  0.48152499,  0.4813301,  0.48112098,  0.48089669,
             0.4806562,  0.48039843,  0.48012217,  0.47982613,  0.47950889,
             0.47916891,  0.47880449,  0.47841377,  0.47799471,  0.47754508,
             0.47706238,  0.47654388,  0.47598655,  0.47538702,  0.47474155,
             0.47404596,  0.47329559,  0.47248522,  0.47160899,  0.47066032,
             0.46963176,  0.46851491,  0.46730024,  0.46597693,  0.46453263,
             0.46295323,  0.46122256,  0.45932202,  0.45723016,  0.45492218,
             0.45236929,  0.44953799,  0.44638917,  0.44287703,  0.4389478,
             0.4345382,  0.42957353,  0.42396551,  0.41760968,  0.41038236,
             0.40213731,  0.39270201,  0.38187394,  0.36941732,  0.35506101,
             0.33849906,  0.31939588,  0.2973989,  0.27216213,  0.24338416,
             0.21086228,  0.17456015,  0.13467895,  0.09171303,  0.04646505])

        self.assertEqual(np.shape(theta_wave), np.shape(test_wave))
        np.testing.assert_almost_equal(theta_wave, test_wave)

        lambda_2 = -0.02
        # FIXME: we should test if the right warning is raised.
        # with warnings.catch_warnings(record=True) as w:
        theta_wave = wf.martinis_flux_pulse_v2(
            length=length,
            lambda_2=lambda_2,
            lambda_3=lambda_3,
            theta_f=theta_f,
            f_01_max=f_01_max,
            J2=J2,
            E_c=E_c,
            dac_flux_coefficient=dac_flux_coefficient,
            f_interaction=f_interaction,
            f_bus=f_bus,
            asymmetry=asymmetry,
            sampling_rate=sampling_rate,
            return_unit=return_unit)

        test_wave_2 = np.array(
            [0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.09005954,  0.14284474,
             0.18186991,  0.21419015,  0.24204243,  0.26647824,  0.28810898,
             0.30734685,  0.324501,  0.33982077,  0.35351675,  0.36577166,
             0.37674636,  0.38658342,  0.39540954,  0.40333734,  0.41046686,
             0.41688682,  0.42267581,  0.42790339,  0.43263103,  0.43691307,
             0.44079748,  0.44432666,  0.44753805,  0.45046475,  0.45313603,
             0.45557781,  0.45781305,  0.45986211,  0.46174308,  0.46347203,
             0.46506327,  0.46652955,  0.46788227,  0.46913159,  0.47028661,
             0.4713555,  0.47234556,  0.47326338,  0.47411487,  0.47490535,
             0.47563964,  0.47632205,  0.47695651,  0.47754657,  0.47809543,
             0.47860599,  0.4790809,  0.47952254,  0.47993309,  0.48031452,
             0.48066862,  0.48099702,  0.48130119,  0.48158249,  0.48184211,
             0.48208118,  0.48230068,  0.48250153,  0.48268453,  0.48285041,
             0.48299982,  0.48313336,  0.48325153,  0.48335477,  0.48344349,
             0.48351801,  0.48357861,  0.48362552,  0.4836589,  0.48367888,
             0.48368553,  0.48367888,  0.4836589,  0.48362552,  0.48357861,
             0.48351801,  0.48344349,  0.48335477,  0.48325153,  0.48313336,
             0.48299982,  0.48285041,  0.48268453,  0.48250153,  0.48230068,
             0.48208118,  0.48184211,  0.48158249,  0.48130119,  0.48099702,
             0.48066862,  0.48031452,  0.47993309,  0.47952254,  0.4790809,
             0.47860599,  0.47809543,  0.47754657,  0.47695651,  0.47632205,
             0.47563964,  0.47490535,  0.47411487,  0.47326338,  0.47234556,
             0.4713555,  0.47028661,  0.46913159,  0.46788227,  0.46652955,
             0.46506327,  0.46347203,  0.46174308,  0.45986211,  0.45781305,
             0.45557781,  0.45313603,  0.45046475,  0.44753805,  0.44432666,
             0.44079748,  0.43691307,  0.43263103,  0.42790339,  0.42267581,
             0.41688682,  0.41046686,  0.40333734,  0.39540954,  0.38658342,
             0.37674636,  0.36577166,  0.35351675,  0.33982077,  0.324501,
             0.30734685,  0.28810898,  0.26647824,  0.24204243,  0.21419015,
             0.18186991,  0.14284474,  0.09005954,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.,
             0.,  0.,  0.,  0.,  0.])

        self.assertEqual(np.shape(theta_wave), np.shape(test_wave_2))
        np.testing.assert_almost_equal(theta_wave, test_wave_2)
